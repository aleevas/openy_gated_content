<?php

/**
 * @file
 * The openy_gated_content module routines.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Drupal\openy_gated_content\SegmentContentAccessCheck;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_theme().
 */
function openy_gated_content_theme() {
  return [
    'paragraph__gated_content' => [
      'base hook' => 'paragraph',
      'variables' => [
        'app_settings' => '',
      ],
    ],
    'paragraph__gated_content_login' => [
      'base hook' => 'paragraph',
      'variables' => [
        'auth_provider_id' => '',
        'auth_configuration' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_paragraph().
 */
function openy_gated_content_preprocess_paragraph(&$variables) {
  if (!isset($variables['paragraph'])) {
    return;
  }

  if (!in_array($variables['paragraph']->getType(), ['gated_content', 'gated_content_login'])) {
    return;
  }

  $variables['#cache']['tags'][] = 'config:openy_gated_content.settings';
  $variables['#cache']['tags'][] = 'config:openy_gc_auth.settings';
  $active_provider = \Drupal::config('openy_gc_auth.settings')->get('active_provider');
  $identityProviderManager = \Drupal::service('plugin.manager.gc_identity_provider');
  $plugin_definition = $identityProviderManager->getDefinition($active_provider, FALSE);
  if (!$plugin_definition) {
    return;
  }
  $plugin_instance = $identityProviderManager->createInstance($active_provider);
  $app_config = \Drupal::config('openy_gated_content.settings')->getOriginal();
  $variables['app_settings'] = json_encode($app_config);
  $variables['#cache']['tags'][] = 'config:' . $plugin_instance->getConfigName();
}

/**
 * Implements hook_jsonapi_ENTITY_TYPE_filter_access().
 *
 * Without this hook there no access to filter by date in
 * JSON API for eventinstance.
 *
 * @see https://www.drupal.org/project/jsonapi/issues/3037519
 */
function openy_gated_content_jsonapi_eventinstance_filter_access(EntityTypeInterface $entity_type, AccountInterface $account) {
  return ([
    JSONAPI_FILTER_AMONG_ALL => AccessResult::allowed(),
    JSONAPI_FILTER_AMONG_PUBLISHED => AccessResult::allowed(),
    JSONAPI_FILTER_AMONG_OWN => AccessResult::allowed(),
  ]);
}

/**
 * Implements hook_form_alter().
 */
function openy_gated_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $event_series_forms = [
    'eventseries_live_stream_edit_form',
    'eventseries_virtual_meeting_edit_form',
  ];
  if (in_array($form_id, $event_series_forms)) {
    // Disable rebuild form.
    $form['#validate'][] = '_openy_gated_content_form_eventseries_live_stream_validate';
    // We need to clear JSON API cache bin on submit.
    $form['actions']['submit']['#submit'][] = '_openy_gated_content_form_eventseries_live_stream_submit';
  }

  $event_instance_forms = [
    'eventinstance_live_stream_edit_form',
    'eventinstance_virtual_meeting_edit_form',
  ];
  if (in_array($form_id, $event_instance_forms)) {
    // Collapse field_inheritance by default in event instance edit form.
    $form['field_inheritance']['#open'] = FALSE;
  }

  if (!isset($form['field_vy_permission'])) {
    return;
  }

  $gcConfig = \Drupal::config('openy_gated_content.settings')->getRawData();
  $allowedForms = [];
  if (!empty($gcConfig['permissions_entities'])) {
    $permissionEnabledEntities = $gcConfig['permissions_entities'];
    foreach ($permissionEnabledEntities as $entity_key => $bundle_list) {
      foreach ($bundle_list as $bundle) {
        $allowedForms[] = $entity_key . '_' . $bundle . '_form';
        $allowedForms[] = $entity_key . '_' . $bundle . '_edit_form';
      }
    }
  }

  $form['virtual_y_permissions'] = [
    '#type' => 'details',
    '#title' => t('Virtual Y Permissions'),
    '#description' => t('Select user segments that available to see this content.'),
    '#open' => FALSE,
    '#group' => 'advanced',
    '#weight' => 125,
  ];

  $form['field_vy_permission']['#group'] = 'virtual_y_permissions';

  if (!in_array($form_id, $allowedForms)) {
    // Close access to permissions field for all entities except of enabled.
    $form['virtual_y_permissions']['#access'] = FALSE;
    $form['field_vy_permission']['#access'] = FALSE;
    return;
  }

}

/**
 * Custom validation for eventseries_live_stream_edit_form.
 */
function _openy_gated_content_form_eventseries_live_stream_validate(&$form, FormStateInterface $form_state) {
  // This will fix entity save, but disable confirmation step
  // on date change.
  $form_state->setRebuild(FALSE);
}

/**
 * Custom submit handler for eventseries_live_stream_edit_form.
 */
function _openy_gated_content_form_eventseries_live_stream_submit(&$form, FormStateInterface $form_state) {
  \Drupal::cache('jsonapi_normalizations')->deleteAll();
}

/**
 * Implements hook_page_attachments().
 */
function openy_gated_content_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'openy_gated_content/styles';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openy_gated_content_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'openy_gated_content_user_login_validation';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openy_gated_content_form_user_pass_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'openy_gated_content_user_pass_validation';
}

/**
 * Checks if user has related to Virtual Y role.
 */
function openy_gated_content_user_login_validation(array &$form, FormStateInterface $form_state) {
  if (!$form_state->get('uid')) {
    return;
  }
  $account = \Drupal::entityTypeManager()->getStorage('user')->load($form_state->get('uid'));
  if ($account) {
    $roles = $account->getRoles();
    foreach ($roles as $role) {
      if (strpos($role, 'virtual_y_') !== FALSE || $role == 'virtual_y') {
        \Drupal::messenger()->addError('You\'re not allowing to login with Virtual Y user role.');
        throw new AccessDeniedHttpException();
      }
    }
  }
}

/**
 * Checks if user has related to Virtual Y role.
 */
function openy_gated_content_user_pass_validation(array &$form, FormStateInterface $form_state) {
  $account = $form_state->getValue('account');
  if ($account) {
    $roles = $account->getRoles();
    foreach ($roles as $role) {
      if (strpos($role, 'virtual_y_') !== FALSE || $role == 'virtual_y') {
        \Drupal::messenger()->addError('You\'re not allowing to reset password for user with Virtual Y role.');
        throw new AccessDeniedHttpException();
      }
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function openy_gated_content_entity_base_field_info(EntityTypeInterface $entity_type) {

  $allowed_entity_types = [];

  $gcConfig = \Drupal::config('openy_gated_content.settings')->getRawData();
  if (!empty($gcConfig['permissions_entities'])) {
    $permissionEnabledEntities = $gcConfig['permissions_entities'];
    $allowed_entity_types = array_keys($permissionEnabledEntities);
  }

  if (in_array($entity_type->id(), $allowed_entity_types)) {
    $fields = [];
    $fields['field_vy_permission'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Virtual Y Access Group'))
      ->setCardinality(1)
      ->setDefaultValue('virtual_y')
      ->setProvider('openy_gated_content')
      ->setRequired(FALSE)
      ->setRevisionable(FALSE)
      ->setTranslatable(FALSE)
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'virtual_y_roles_select',
        'settings' => [
          'size' => '255',
        ],
      ]);

    return $fields;
  }

}

/**
 * Implements hook_entity_access().
 */
function openy_gated_content_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(SegmentContentAccessCheck::class)
    ->checkAccess($entity, $operation, $account);

}
